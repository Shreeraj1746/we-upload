name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run unit tests
        run: pytest --cov=app tests/ --ignore=tests/test_e2e_upload_download.py --ignore=tests/test_basic_file_api.py
        env:
          WE_UPLOAD_POSTGRES_SERVER: localhost
          WE_UPLOAD_POSTGRES_USER: postgres
          WE_UPLOAD_POSTGRES_PASSWORD: postgres
          WE_UPLOAD_POSTGRES_DB: test_db
          WE_UPLOAD_SECRET_KEY: test-secret-key
          WE_UPLOAD_S3_BUCKET_NAME: test-bucket

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run API integration tests
        run: |
          # Run the test that will manage Docker Compose and test the API
          pytest tests/test_basic_file_api.py tests/test_api_integration.py -v
