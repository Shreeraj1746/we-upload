name: CI

on:
  push:
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pre-commit

      - name: Set up pre-commit cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install Terraform for pre-commit hooks
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Install terraform-docs
        run: |
          curl -Lo ./terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/
          terraform-docs --version

      - name: Lint with pre-commit
        run: pre-commit run --all-files

  test:
    name: Unit Testing
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run unit tests
        run: pytest --cov=app tests/ --ignore=tests/test_e2e_upload_download.py --ignore=tests/test_basic_file_api.py
        env:
          WE_UPLOAD_POSTGRES_SERVER: localhost
          WE_UPLOAD_POSTGRES_USER: postgres
          WE_UPLOAD_POSTGRES_PASSWORD: postgres
          WE_UPLOAD_POSTGRES_DB: test_db
          WE_UPLOAD_SECRET_KEY: test-secret-key
          WE_UPLOAD_S3_BUCKET_NAME: test-bucket

  e2e-test:
    name: API Integration Testing
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pytest pytest-xdist requests

      - name: Set up Docker Compose
        uses: docker/setup-buildx-action@v2

      - name: Run API integration tests
        run: |
          # Run the test that will manage Docker Compose and test the API
          pytest tests/test_basic_file_api.py -v

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, e2e-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: we-upload:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
